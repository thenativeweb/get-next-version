name: Release

on:
  push:
    branches:
      - 'main'

jobs:
  qa:
    name: Release
    runs-on: ubuntu-latest

    steps:
    - name: Clone repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Use Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.18'
    - name: Get next version
      id: get_next_version
      uses: ./

    - name: Set new image version in action.yml
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      run: |
        sed -i "s/<version>/${{ steps.get_next_version.outputs.version }}/" ./action.yml
    - name: Create release commit
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      uses: EndBug/add-and-commit@v7
      with:
        add: ./action.yml
        message: "chore(release): Version ${{ steps.get_next_version.outputs.version }} [skip ci]"
        default_author: github_actions
    - name: Create new version
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      run: |
        NEXT_VERSION=${{ steps.get_next_version.outputs.version }}

        git tag $NEXT_VERSION
        git push origin $NEXT_VERSION
    - name: Build artifacts
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      run: |
        make build-all
    - name: Release new version
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/*"
        tag: ${{ steps.get_next_version.outputs.version }}

    - name: Set up QEMU
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      uses: docker/setup-buildx-action@v2
    - name: Build and push docker image
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      uses: docker/build-push-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/thenativeweb/get-next-version:latest,ghcr.io/thenativeweb/get-next-version:${{steps.get_next_version.outputs.version}}
        build-args: >
          githubTokenAdmin=${{ secrets.GH_TOKEN_ADMIN }}
